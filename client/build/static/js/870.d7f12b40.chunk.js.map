{"version":3,"file":"static/js/870.d7f12b40.chunk.js","mappings":"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","sources":["components/Email.jsx","components/common/NoMails.jsx","components/Emails.jsx","constants/constants.js","services/api.js","hooks/useApi.jsx","services/api.urls.js"],"sourcesContent":["import {Box, Typography, Checkbox, styled} from \"@mui/material\";\r\nimport {Star, StarBorder} from \"@mui/icons-material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {routes} from \"../routes/routes.js\";\r\nimport useApi from \"../hooks/useApi.jsx\";\r\nimport { API_URLS } from \"../services/api.urls.js\";\r\n\r\n\r\nconst Wrapper = styled(Box)({\r\n    padding: '0 0 0 10px',\r\n    background: '#f2f6fc',\r\n    cursor: 'pointer',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    '& > div': {\r\n        display: 'flex',\r\n        width: '100%',\r\n        '& > p': {\r\n            fontSize: 14\r\n        }\r\n    }\r\n});\r\n\r\nconst Indicator = styled(Typography)({\r\n    fontSize: '12px !important',\r\n    background: '#ddd',\r\n    color: '#222',\r\n    padding: '0 4px',\r\n    borderRadius: '4px',\r\n    marginRight: '6px'\r\n});\r\n\r\nconst Date = styled(Typography)({\r\n    marginLeft: 'auto',\r\n    marginRight: '20px',\r\n    fontSize: '12px',\r\n    color: '#5F6368'\r\n})\r\n\r\nconst Email = ({email, selectedEmails, setRefreshScreen, setSelectedEmails}) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const toggleStarredService = useApi(API_URLS.toggleStarredEmail);\r\n\r\n    const toggleStarredMails = () => {\r\n        toggleStarredService.call({ id: email._id, value: !email.starred});\r\n        setRefreshScreen(prevState => !prevState);\r\n    }\r\n\r\n    const onValueChange = () =>{\r\n        if(selectedEmails.includes(email._id)){\r\n            setSelectedEmails(prevState => prevState.filter(id => id != email._id));\r\n        } else {\r\n            setSelectedEmails(prevState => [...prevState, email._id]);\r\n        }\r\n    }\r\n    return(\r\n        <Wrapper>\r\n            <Checkbox \r\n                size='small' \r\n                checked={selectedEmails.includes(email._id)} \r\n                onChange={() => onValueChange()}\r\n            />\r\n            {\r\n                email.starred ? \r\n                    <Star fontSize='small' style={{ marginRight: 10, color: '#FFF200'}} onClick={() => toggleStarredMails()} />\r\n                :\r\n                    <StarBorder fontSize='small' style={{marginRight: 10}} onClick={() => toggleStarredMails()}/>\r\n            }\r\n            <Box onClick={() => navigate(routes.view.path, {state: {email: email}})}>\r\n                <Typography style={{width: 200, overflow: 'hidden'}}>{email.name}</Typography>\r\n                <Indicator>Inbox</Indicator>\r\n                <Typography>{email.subject} {email.name && '-'} {email.body}</Typography>\r\n                <Date>\r\n                    {(new window.Date(email.date)).getDate()} {(new window.Date(email.date)).toLocaleString('default', {month: 'short'})}\r\n                </Date>\r\n            </Box>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Email;","import {Box, Typography, styled, Divider} from \"@mui/material\";\r\n\r\nconst Component = styled(Box)({\r\n    display: 'flex', \r\n    alignItems: 'center',\r\n    flexDirection: 'column',\r\n    marginTop: 50,\r\n    opacity: '.8',\r\n    width: '100%'\r\n});\r\n\r\nconst StyledDivider = styled(Divider)({\r\n    width: '100%',\r\n    marginTop: 10\r\n})\r\n\r\nconst NoMails = ({message}) => {\r\n    return (\r\n        <Component>\r\n            <Typography>{message.heading}</Typography>\r\n            <Typography>{message.subHeading}</Typography>\r\n            <StyledDivider />\r\n        </Component>\r\n    )\r\n}\r\n\r\nexport default NoMails;","import { useOutletContext, useParams } from \"react-router-dom\";\r\nimport { API_URLS } from \"../services/api.urls\";\r\nimport useApi from \"../hooks/useApi\";\r\nimport { useEffect } from \"react\";\r\nimport {Checkbox, Box, List, ListItem} from '@mui/material';\r\nimport { Api, DeleteOutline} from '@mui/icons-material';\r\nimport Email from \"./Email\";\r\nimport { useState } from \"react\";\r\nimport NoMails from \"./common/NoMails\";\r\nimport { EMPTY_TABS } from \"../constants/constants\";\r\n\r\nconst Emails = () => {\r\n    const [selectedEmails, setSelectedEmails] = useState([]);\r\n\r\n    const [refreshScreen, setRefreshScreen] = useState(false);\r\n\r\n    const {openDrawer} = useOutletContext();\r\n    const {type} = useParams();\r\n\r\n    const getEmailsService = useApi(API_URLS.getEmailFromType);\r\n    const moveEmailsToBinService = useApi(API_URLS.moveEmailsToBin);\r\n    const deleteEmailService = useApi(API_URLS.deleteEmail);\r\n    \r\n    useEffect(() => {\r\n        getEmailsService.call({}, type);\r\n    }, [type, refreshScreen])\r\n\r\n    const selectAllEmails = (e) => {\r\n        if(e.target.checked){\r\n            const emails = getEmailsService?.response?.map(email => email._id);\r\n            setSelectedEmails(emails);\r\n        } else {\r\n            setSelectedEmails([]);\r\n        }\r\n    }\r\n\r\n    const deleteSelectedEmails = (e) => {\r\n        if(type === 'bin'){\r\n            deleteEmailService.call(selectedEmails);\r\n        } else {\r\n            moveEmailsToBinService.call(selectedEmails);\r\n        }\r\n        setRefreshScreen(prevState => !prevState);\r\n    }\r\n\r\n    return (\r\n        <Box style={openDrawer ? {width: 'calc(100% - 250px)', marginLeft: 250} : {width: '100%'}}>\r\n            <Box style={{padding: '20px 10px 0 10px', display: 'flex', alignItems: 'center'}}>\r\n                <Checkbox size='small' onChange={(e) => selectAllEmails(e)}/>\r\n                <DeleteOutline onClick={(e) => deleteSelectedEmails(e)}/>\r\n            </Box>\r\n            <List>\r\n                {\r\n                    getEmailsService?.response?.map(email => (\r\n                        <Email \r\n                            key={email._idd}\r\n                            email={email}\r\n                            selectedEmails={selectedEmails}\r\n                            setRefreshScreen={setRefreshScreen}\r\n                            setSelectedEmails={setSelectedEmails}\r\n                        />\r\n                    ))\r\n                }\r\n            </List>\r\n            {\r\n                getEmailsService?.response?.length === 0 &&\r\n                    <NoMails message={EMPTY_TABS[type]}/>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Emails;","export const gmailLogo = 'https://ssl.gstatic.com/ui/v1/icons/mail/rfr/logo_gmail_lockup_default_1x_r5.png';\r\nexport const emptyInbox = 'https://miro.medium.com/max/1088/1*DhOnyEHovQZ31rH00-VUDw.png';\r\nexport const emptyProfilePic = 'https://ssl.gstatic.com/ui/v1/icons/mail/profile_mask2.png';\r\n\r\nexport const EMPTY_TABS = {\r\n    inbox: {\r\n        heading: 'Your inbox is empty',\r\n        subHeading: \"Mails that don't appear in other tabs will be shown here.\"\r\n    },\r\n    drafts: {\r\n        heading: \"You don't have any saved drafts.\",\r\n        subHeading: \"Saving a draft allows you to keep a message you aren't ready to send yet.\"\r\n    },\r\n    starred: {\r\n        heading: 'No starred messages',\r\n        subHeading: \"Stars let you give messages a special status to make them easier to find. To star a message, click on the star outline beside any message or conversation.\"\r\n    },\r\n    sent: {\r\n        heading: 'No sent messages!',\r\n        subHeading: 'Send one now!'\r\n    },\r\n    bin: {\r\n        heading: 'No conversations in Bin.',\r\n        subHeading: ''\r\n    },\r\n    allmail: {\r\n        heading: \"Wow! it's empty\",\r\n        subHeading: ''\r\n    }\r\n}","import axios from 'axios';\r\n\r\nconst API_URL = \"\";\r\n\r\nconst API_GMAIL = async (urlObject, payload, type) => {\r\n    return await axios({\r\n        method: urlObject.method,\r\n        url: `${API_URL}/${urlObject.endpoint}/${type}`,\r\n        data: payload\r\n    })\r\n};\r\n\r\nexport default API_GMAIL;","import { useState } from 'react';\r\nimport API_GMAIL from '../services/api.js';\r\n\r\nconst useApi = (urlObject) => {\r\n    const [response, setResponse] = useState(null);\r\n    const [error, setError] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const call = async (payload, type = '') => {\r\n        setResponse(null);\r\n        setError(\"\");\r\n        setIsLoading(true);\r\n        try {\r\n            let res = await API_GMAIL(urlObject, payload, type);\r\n            setResponse(res.data);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return {call, response, error, isLoading};\r\n};\r\n\r\nexport default useApi;","export const API_URLS = {\r\n    saveSentEmail: {\r\n        endpoint: 'save',\r\n        method: 'POST'\r\n    },\r\n    getEmailFromType: {\r\n        endpoint: 'emails',\r\n        method: 'GET'\r\n    },\r\n    saveDraftEmails: {\r\n        endpoint: 'save-draft',\r\n        method: 'POST'\r\n    },\r\n    moveEmailsToBin: {\r\n        endpoint: 'bin',\r\n        method: 'POST'\r\n    },\r\n    toggleStarredEmail: {\r\n        endpoint: 'starred',\r\n        method: 'POST'\r\n    },\r\n    deleteEmail: {\r\n        endpoint: 'delete',\r\n        method: 'DELETE'\r\n    }\r\n}"],"names":["Wrapper","styled","Box","padding","background","cursor","display","alignItems","width","fontSize","Indicator","Typography","color","borderRadius","marginRight","Date","marginLeft","_ref","email","selectedEmails","setRefreshScreen","setSelectedEmails","navigate","useNavigate","toggleStarredService","useApi","API_URLS","toggleStarredEmail","toggleStarredMails","call","id","_id","value","starred","prevState","_jsxs","children","_jsx","Checkbox","size","checked","includes","onChange","filter","concat","_toConsumableArray","Star","style","onClick","StarBorder","routes","view","path","state","overflow","name","subject","body","window","date","getDate","toLocaleString","month","Component","flexDirection","marginTop","opacity","StyledDivider","Divider","message","heading","subHeading","_getEmailsService$res2","_getEmailsService$res3","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","refreshScreen","openDrawer","useOutletContext","type","useParams","getEmailsService","getEmailFromType","moveEmailsToBinService","moveEmailsToBin","deleteEmailService","deleteEmail","useEffect","e","target","_getEmailsService$res","emails","response","map","selectAllEmails","DeleteOutline","List","Email","_idd","length","NoMails","EMPTY_TABS","gmailLogo","emptyProfilePic","inbox","drafts","sent","bin","allmail","API_GMAIL","_asyncToGenerator","_regeneratorRuntime","mark","_callee","urlObject","payload","wrap","_context","prev","next","axios","method","url","endpoint","data","abrupt","stop","_x","_x2","_x3","apply","arguments","setResponse","error","setError","_useState5","_useState6","isLoading","setIsLoading","res","_args","undefined","t0","finish","saveSentEmail","saveDraftEmails"],"sourceRoot":""}